plugins {
  id 'application'
  id 'java'
  id 'checkstyle'
  id 'jacoco'
  id 'pmd'
  id 'org.owasp.dependencycheck' version '6.5.0.1'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.3'
  id "net.java.openjdk.shinyafox.jshell.gradle.plugin" version "1.0.5"
  id 'org.springframework.boot' version '2.6.1'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'info.solidsoft.pitest' version '1.7.0'
}

group 'uk.gov.hmcts.reform'
version '1.0.0'
archivesBaseName = 'data-extractor'
mainClassName = 'uk.gov.hmcts.reform.dataextractor.DataExtractorApplication'

sourceCompatibility = "11"
targetCompatibility = "11"

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


test {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}



task integrationPreTest(type: Test, description: 'Runs the pre deploy integration setup.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
}


task integrationPostTest(type: Test, description: 'Runs the pre deploy integration setup.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
}


task functional(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
  mustRunAfter test
  testLogging {
    exceptionFormat = 'full'
  }
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

integrationPreTest {
  filter {
    includeTestsMatching "*PreDeployTest"
  }
}

integrationPostTest {
  filter {
    excludeTestsMatching "*PreDeployTest"
  }
}

functional {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.23'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.21.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacoco {
  toolVersion = "0.8.7"
}

jacocoTestReport {
  executionData(test, functional)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

def sonarExclusions = [
    "**/uk/gov/hmcts/reform/dataextractor/DataExtractorApplication.java",
]

project.tasks['sonarqube'].dependsOn test, functional, jacocoTestReport
sonarqube {
  properties {
    property "sonar.projectName", "data-extractor-job"
    property "sonar.projectKey", "data-extractor-job"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property 'sonar.coverage.exclusions', sonarExclusions.join(", ")
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false

  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url 'https://jitpack.io'
  }
}

jar {
  manifest {
    attributes 'Main-Class': 'uk.gov.hmcts.reform.dataextractor.DataExtractorApplication',
      'Implementation-Title': project.name, 
      'Implementation-Version': project.version
  }
}

def versions = [
    junit           : '5.8.2',
    jackson         : '2.13.0',
    commonsBeanUtils: '1.9.4',
    azureAppInsights: '2.6.4',
    azureStorage    : '12.14.2',
    azureSpringBoot : '3.11.0',
    springBoot      : '2.6.1',
    springCloud     : '3.1.0',
    postgresql      : '42.3.1',
    pitest          : '1.7.3',
    gradlePitest    : '1.7.0',
    sonarPitest     : '0.5',
    miCoreLib       : '3.6.0-draft-4',
    guava           : '31.0.1-jre',
    commonsIo       : '2.11.0',
    commonsLang     : '3.12.0'
]

dependencies {
  integrationTestImplementation(sourceSets.test.output)
  functionalTestImplementation(sourceSets.test.output)
}

configurations {
  integrationTestImplementation.extendsFrom(testImplementation)
  integrationTestRuntime.extendsFrom(testRuntime)
  functionalTestRuntime.extendsFrom(testRuntime)
  functionalTestImplementation.extendsFrom(testImplementation)
}


configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion versions.jackson
      }

      if (details.requested.group in ['commons-beanutils']) {
        details.useVersion versions.commonsBeanUtils
      }
    }
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'com.squareup.retrofit2', name: 'adapter-rxjava', version: '2.9.0'

    dependency group: 'commons-io', name: 'commons-io', version: versions.commonsIo

    dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'

    dependencySet(group: 'org.springframework', version: '5.3.13') {
      entry 'spring-aop'
      entry 'spring-beans'
      entry 'spring-context'
      entry 'spring-core'
      entry 'spring-expression'
      entry 'spring-jcl'
      entry 'spring-jdbc'
      entry 'spring-tx'
      entry 'spring-web'
    }

    dependency group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.6.0'

    dependencySet(group: 'io.netty', version: '4.1.72.Final') {
      entry 'netty-buffer'
      entry 'netty-codec'
      entry 'netty-codec-dns'
      entry 'netty-codec-http'
      entry 'netty-codec-http2'
      entry 'netty-codec-socks'
      entry 'netty-common'
      entry 'netty-handler'
      entry 'netty-handler-proxy'
      entry 'netty-resolver'
      entry 'netty-resolver-dns'
      entry 'netty-resolver-dns-classes-macos'
      entry 'netty-resolver-dns-native-macos'
      entry 'netty-transport'
      entry 'netty-transport-classes-epoll'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-classes-kqueue'
      entry 'netty-transport-native-kqueue'
      entry 'netty-transport-native-unix-common'
    }

    dependencySet(group: 'org.apache.logging.log4j', version: '2.17.1') {
      entry 'log4j-to-slf4j'
      entry 'log4j-api'
    }
  }
}


dependencies {
  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

  implementation group: 'com.microsoft.azure.msi_auth_token_provider', name: 'azure-authentication-msi-token-provider', version: '1.0.0-Beta-2'
  implementation group: 'com.azure.spring', name: 'azure-spring-boot-starter', version: versions.azureSpringBoot
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: versions.azureAppInsights
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: versions.springCloud

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.9.0'
  implementation group: 'com.google.guava', name: 'guava', version: versions.guava
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang

  implementation group: 'com.typesafe', name: 'config', version: '1.4.1'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  implementation 'org.springframework.boot:spring-boot-starter-batch'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'com.azure', name: 'azure-storage-blob', version: versions.azureStorage

  // needed for app insights
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

  implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
  implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
  implementation group: 'com.github.hmcts', name: 'mi-core-lib', version: versions.miCoreLib

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.1.0'
  testImplementation group: 'com.azure.spring', name: 'azure-spring-boot-starter', version: versions.azureSpringBoot

  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor "org.projectlombok:lombok"

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  functionalTestImplementation 'org.testcontainers:postgresql:1.16.2'
  functionalTestImplementation 'org.testcontainers:junit-jupiter:1.16.2'
  functionalTestImplementation 'com.ninja-squad:DbSetup:2.1.0'
  functionalTestImplementation group: 'com.github.hmcts', name: 'mi-core-lib', version: versions.miCoreLib
  functionalTestImplementation group: 'com.azure', name: 'azure-storage-blob', version: versions.azureStorage
  functionalTestImplementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  integrationTestCompileOnly 'org.projectlombok:lombok'
  integrationTestAnnotationProcessor "org.projectlombok:lombok"
  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'com.github.hmcts', name: 'mi-core-lib', version: versions.miCoreLib
}

pitest {
  pitestVersion = '1.5.2'
  targetClasses = ['uk.gov.hmcts.reform.dataextractor.*']
  excludedClasses = ['uk.gov.hmcts.reform.dataextractor.DataExtractorApplication']
  testSourceSets = [sourceSets.test, sourceSets.functionalTest]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
  verbose = true
  junit5PluginVersion = '0.12'
}

mainClassName = 'uk.gov.hmcts.reform.dataextractor.DataExtractorApplication'

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
