plugins {
  id 'application'
  id 'java'
  id 'checkstyle'
  id 'jacoco'
  id 'pmd'
  id 'org.owasp.dependencycheck' version '5.1.0'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.7'
  id "net.java.openjdk.shinyafox.jshell.gradle.plugin" version "1.0.4"
  id 'org.springframework.boot' version '2.2.1.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

group 'uk.gov.hmcts.reform'
version '1.0.0'
archivesBaseName = 'data-extractor'
mainClassName = 'uk.gov.hmcts.reform.dataextractor.DataExtractorApplication'


sourceCompatibility = "11"
targetCompatibility = "11"

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


test {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}



task integrationPreTest(type: Test, description: 'Runs the pre deploy integration setup.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
}


task integrationPostTest(type: Test, description: 'Runs the pre deploy integration setup.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
}


task functionalTest(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
  mustRunAfter test
  testLogging {
    exceptionFormat = 'full'
  }
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

integrationPreTest {
  filter {
    includeTestsMatching "*PreDeployTest"
  }
}

integrationPostTest {
  filter {
    excludeTestsMatching "*PreDeployTest"
  }
}

functionalTest {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.18'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.11.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacoco {
  toolVersion = "0.8.3"
}

jacocoTestReport {
  executionData(test, functionalTest)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

def sonarExclusions = [
        "**/uk/gov/hmcts/reform/dataextractor/Extractor*.java",
        "**/uk/gov/hmcts/reform/dataextractor/Query*.java",
        "**/uk/gov/hmcts/reform/dataextractor/BlobOut*.java",
        "**/ManageIdentityStreamProvider.java"
]

project.tasks['sonarqube'].dependsOn test, functionalTest, jacocoTestReport
sonarqube {
  properties {
    property "sonar.projectName", "data-extractor-job"
    property "sonar.projectKey", "data-extractor-job"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property 'sonar.coverage.exclusions', sonarExclusions.join(", ")
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false

  }
}

repositories {
  mavenLocal()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  jcenter()
  mavenCentral()
}

jar {
  manifest {
    attributes 'Main-Class': 'uk.gov.hmcts.reform.dataextractor.DataExtractorApplication', 
      'Implementation-Title': project.name, 
      'Implementation-Version': project.version
  }
}

def versions = [
  junit: '5.4.2',
  logging: '5.1.1',
  jackson: '2.10.0',
  commonsBeanUtils: '1.9.4',
  springBoot: '2.2.1.RELEASE',
  postgresql: '42.2.5'
]

dependencies {
  integrationTestCompile(sourceSets.test.output)
  functionalTestCompile(sourceSets.test.output)
}

configurations {
  integrationTestCompile.extendsFrom(testCompile)
  integrationTestRuntime.extendsFrom(testRuntime)
  functionalTestRuntime.extendsFrom(testRuntime)
  functionalTestCompile.extendsFrom(testCompile)
}


configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion versions.jackson
      }

      if (details.requested.group in ['commons-beanutils']) {
        details.useVersion versions.commonsBeanUtils
      }
    }
  }
}

dependencies {
  compile group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

  compile group: 'com.microsoft.azure', name: 'azure-storage', version: '8.3.0'
  compile group: 'com.microsoft.azure.msi_auth_token_provider', name: 'azure-authentication-msi-token-provider', version: '1.0.0-Beta-1'

  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  compile group: 'org.apache.commons', name: 'commons-csv', version: '1.6'
  compile group: 'com.google.guava', name: 'guava', version: '28.0-jre'
  compile group: 'com.typesafe', name: 'config', version: '1.3.4'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  implementation 'org.springframework.boot:spring-boot-starter-batch'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  
  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.logging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.logging
  compile('uk.gov.hmcts.reform:properties-volume-spring-boot-starter:0.0.4') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
  }

  compile 'com.azure:azure-storage-blob:12.0.0'

  // needed for app insights
  compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.25.0'

  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor "org.projectlombok:lombok"

  testCompile('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }


  functionalTestCompile 'org.testcontainers:postgresql:1.12.3'
  functionalTestCompile 'org.testcontainers:junit-jupiter:1.12.3'
  functionalTestCompile 'com.ninja-squad:DbSetup:2.1.0'

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile sourceSets.test.runtimeClasspath

  integrationTestCompileOnly 'org.projectlombok:lombok'
  integrationTestAnnotationProcessor "org.projectlombok:lombok"
  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.dataextractor.DataExtractorApplication'

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
