# Java
# Package your Java project.
# Add steps that install, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: 'Scheduled-$(SourceBranchName)-$(Build.SourceVersion) Build-$(Build.BuildId)'

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master
    always: true

trigger: none
pr: none

variables:
#  group: pipeline-env-variables

  environment: 'stg' #Uset test and promoting to stg until prod is ready
  env.upper: 'STG'
  env.prom: 'prod'
  env.prom.upper: 'PROD'
  application.name: 'data-extractor-job'
  azure.subscription.endpoint: 'DTS-SHAREDSERVICES-$(env.upper)'
  azure.aks.resourcegroup: 'ss-$(env)-00-rg'
  azure.aks.cluster: 'ss-$(env)-00-aks'
  azure.prom.subscription.endpoint: 'DTS-SHAREDSERVICES-$(env.prom.upper)'
  azure.prom.aks.resourcegroup: 'ss-$(env.prom)-00-aks-rg'
  azure.prom.aks.cluster: 'ss-$(env.prom)-00-aks'
  manual.branch.prefix: 'master'
  product: 'mi'
  vault: 'mi-vault-$(env)'
  helm.repo: 'sdshmctspublic'
resources:
  repositories:
    - repository: mi-core
      type: github
      name: hmcts/mi-core-lib
      endpoint: hmcts

stages:
  - template: pipeline-steps/templates/build-deploy-stage.yaml@mi-core
    parameters:
      env: $(environment)
      applicationName: $(application.name)
      product: $(product)
      azureVault: $(vault)
      chartEnv: $(environment)
      mutationTest: True
      functionalTest: true
      preIntegrationTest: true
      helmRepo: $(helm.repo)
      agentPool: hmcts-ss-$(environment)
      envMapping:
      - key: BUILD_VERSION
        value: Build.BuildId
      azureSecreKeys: 'ccdro-user,ccdro-password,data-extractor-connection-string'
      azureKeyMapping:
      - key: ETL_DB_USER
        value: 'ccdro-user'
      - key: ETL_DB_PASSWORD
        value: 'ccdro-password'
      - key: ETL_CONNECTIONSTRING
        value: 'data-extractor-connection-string'
