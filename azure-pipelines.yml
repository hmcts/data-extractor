# Java
# Package your Java project.
# Add steps that install, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: '$(SourceBranchName)-$(Build.SourceVersion) Build-$(Build.BuildId)'

trigger:
  batch: true
  branches:
    include:
      - master
      - pipeline-test
  tags:
    include:
      - v*

pr:
  autoCancel: true
  branches:
    include:
      - master
      - feature/*

variables:
  application.name: 'data-extractor-job'
  azure.subscription.endpoint: 'DTS-SHAREDSERVICES-SBOX'
  azure.aks.resourcegroup: 'ss_sbox_kubernetes_resource_group'
  azure.aks.cluster: 'ss_aks_sbox'
  azure.stg.subscription.endpoint: 'DTS-SHAREDSERVICES-STG'
  azure.stg.aks.resourcegroup: 'ss_stg_kubernetes_resource_group'
  azure.stg.aks.cluster: 'ss_aks_stg'
  manual.branch.prefix: 'master'
  product: 'mi'
  chart.env: 'preview'

resources:
  repositories:
    - repository: mi-core
      type: github
      name: hmcts/mi-core-lib
      endpoint: hmcts

jobs:
  - job: BuildAndTestApplication
    dependsOn: PromoteProd
    condition:  and(succeeded(), variables['System.PullRequest.PullRequestId'])
    pool:
      vmImage: 'Ubuntu-16.04'

    variables:
      aptDependencies: 'qtbase5-dev'
    steps:
      - template: pipeline-steps/templates/build-application.yaml@mi-core
      - template: pipeline-steps/templates/publish-tests.yaml@mi-core
      - template: pipeline-steps/templates/docker-build.yaml@mi-core
        parameters:
          azureContainerRegistry: $(azure.container.registry)
          azureSubscriptionEndpoint: $(azure.subscription.endpoint)
          applicationName: $(application.name)

  - job: DeployOnTest
    dependsOn: BuildAndTestApplication
    condition:  and(succeeded(), variables['System.PullRequest.PullRequestId'])
    pool:
      vmImage: 'Ubuntu-16.04'
    variables:
      getDockerTag.DOCKER_TAG: $[ dependencies.BuildAndTestApplication.outputs['getDockerTag.DOCKER_TAG'] ]
    steps:
      - template: pipeline-steps/templates/helm-install-chart.yaml@mi-core
        parameters:
          azureContainerRegistry: $(azure.container.registry)
          azureSubscriptionEndpoint: $(azure.subscription.endpoint)
          applicationName: $(application.name)
          aksResourceGroup: $(azure.aks.resourcegroup)
          aksCluster: $(azure.aks.cluster)
          jobName: $(application.name)
          namespace: mi
          chartEnv: $(chart.env)
      - template: pipeline-steps/templates/kubernetes-wait-for-job.yaml@mi-core
        parameters:
          azureSubscriptionEndpoint: $(azure.subscription.endpoint)
          aksResourceGroup: $(azure.aks.resourcegroup)
          aksCluster: $(azure.aks.cluster)
          jobName: $(application.name)
          namespace: $(product)
          projectName: $(application.name)

  - job: DeployOnStg

    dependsOn: BuildAndTestApplication

    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    pool:
      vmImage: 'Ubuntu-16.04'
    variables:
      getDockerTag.DOCKER_TAG: $[ dependencies.BuildAndTestApplication.outputs['getDockerTag.DOCKER_TAG'] ]
    steps:
      - template: pipeline-steps/templates/helm-install-chart.yaml@mi-core
        parameters:
          azureContainerRegistry: $(azure.container.registry)
          azureSubscriptionEndpoint: $(azure.subscription.endpoint)
          applicationName: $(application.name)
          aksResourceGroup: $(azure.stg.aks.resourcegroup)
          aksCluster: $(azure.stg.aks.cluster)
          jobName: $(application.name)
          namespace: mi
          chartEnv: $(chart.env)
      - template: pipeline-steps/templates/kubernetes-wait-for-job.yaml@mi-core
        parameters:
          azureSubscriptionEndpoint: $(azure.subscription.endpoint)
          aksResourceGroup: $(azure.stg.aks.resourcegroup)
          aksCluster: $(azure.stg.aks.cluster)
          jobName: $(application.name)
          namespace: $(product)
          projectName: $(application.name)

  - job: PromoteProd
    condition: always()
    pool:
      vmImage: 'Ubuntu-16.04'
    variables:
      getDockerTag.DOCKER_TAG: $[ dependencies.BuildAndTestApplication.outputs['getDockerTag.DOCKER_TAG'] ]
      System.Debug: true
    steps:
      - template: ./pipeline-steps/templates/promote-build.yaml
        parameters:
          azureContainerRegistry: $(azure.container.registry)
          azureSubscriptionEndpoint: $(azure.subscription.endpoint)
          applicationName: $(application.name)
          azureDestinyContainerRegistry: 'ssprivatetest.azurecr.io'
          azureOriginSubscription: 'a8140a9e-f1b0-481f-a4de-09e2ee23f7ab'
          azureProdSubscription: 'DTS-SHAREDSERVICES-TEST'
          azureProdResourceGroup: 'genesis_resource_group'
          originAcr: 'ssprivatestg'
