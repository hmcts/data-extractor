parameters:
  env: 'test'
  applicationName: ''
  chartEnv: 'preview'
  product: ''
  azureContainerRegistry: $(azure.container.registry)
  azureAksCluster: $(azure.aks.cluster)
  azureSubscriptionEndpoint: $(azure.subscription.endpoint)
  azureAksResourcegroup: $(azure.aks.resourcegroup)
  azurePromAcr: $(azure.prom.acr)
  azurePromSubscriptionEndpoint: $(azure.prom.subscription.endpoint)

stages:
- stage: BuildAndDeploy
  jobs:
    - job: EchoVariablesSBox
      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./templates//tasks/docker-tag.yaml
        - template: ./templates/tasks/echo-variables.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            applicationName: ${{ parameters.applicationName }}
    - job: EchoVariablesTest
      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}
          
      steps:
        - template: ./templates/tasks/docker-tag.yaml

    - job: BuildAndTestApplication
      pool:
        vmImage: 'Ubuntu-16.04'
      dependsOn: EchoVariablesSBox
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      variables:
        aptDependencies: 'qtbase5-dev'
        env: ${{ parameters.env }}
      steps:
        - template: ./templates/tasks/build-assemble.yaml
        - template: pipeline-steps/templates/publish-tests.yaml@mi-core
        - template: ./templates/tasks/publish-artifact.yaml
        - template: ./templates/docker-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            applicationName:  ${{ parameters.applicationName }}

    - job: DeployBuild
      dependsOn: BuildAndTestApplication
      condition: succeeded()
      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./templates/helm-install-chart-job.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            applicationName:  ${{ parameters.applicationName }}
            aksResourceGroup:  ${{ parameters.azureAksResourcegroup }}
            aksCluster:  ${{ parameters.azureAksCluster }}
            jobName:  ${{ parameters.applicationName }}
            namespace: ${{ parameters.product }}
            chartEnv: ${{ parameters.chartEnv }}
        - template: ./templates/kubernetes-wait-for-job.yaml
          parameters:
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            aksResourceGroup:  ${{ parameters.azureAksResourcegroup }}
            aksCluster:  ${{ parameters.azureAksCluster }}
            jobName:  ${{ parameters.applicationName }}
            namespace:  ${{ parameters.product }}
            projectName: ${{ parameters.applicationName }}
    
    - job: IntegrationTest
      dependsOn: EchoVariablesSBox
      condition: succeeded()
      steps:
        - task: AzureKeyVault@1
          displayName: 'Get secrets from Keyvault'
          inputs:
            azureSubscription: ${{ parameters.azureSubscriptionEndpoint }}
            keyVaultName: 'mi-vault-sbox'
            secretsFilter: 'aat-ccdro-user,aat-ccdro-password,data-extractor-connection-string'
        - bash: |
            echo "Secret set"
          displayName: 'Set secrets'
          env:
            ETL_DB_URL: 'jdbc:postgresql://ccd-data-store-api-postgres-db.aat.postgres.database.azure.com:5432/ccd_data_store'
            etl.db.user: $(aat-ccdro-password) 
            etl.db.password: $(data-extractor-connection-string)'

        - template: ./templates/tasks/integration-test.yaml          
        - template: pipeline-steps/templates/publish-tests.yaml@mi-core

    - job: PromoteBuild
      dependsOn: DeployBuild
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      # condition: succeeded()

      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./templates/promote-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            applicationName: ${{ parameters.applicationName }}
            azureDestinyContainerRegistry:  ${{ parameters.azurePromAcr }}
            azureProdSubscription: $(azure.prom.subscription.endpoint)
